'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var ethers = require('ethers');
var utils = require('ethers/utils');

var adapterRegistryABI = [
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "protocolName",
				type: "string"
			},
			{
				internalType: "address[]",
				name: "adapters",
				type: "address[]"
			},
			{
				internalType: "address[][]",
				name: "tokens",
				type: "address[][]"
			}
		],
		name: "addProtocolAdapters",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string[]",
				name: "protocolNames",
				type: "string[]"
			},
			{
				components: [
					{
						internalType: "string",
						name: "name",
						type: "string"
					},
					{
						internalType: "string",
						name: "description",
						type: "string"
					},
					{
						internalType: "string",
						name: "websiteURL",
						type: "string"
					},
					{
						internalType: "string",
						name: "iconURL",
						type: "string"
					},
					{
						internalType: "uint256",
						name: "version",
						type: "uint256"
					}
				],
				internalType: "struct ProtocolMetadata[]",
				name: "metadata",
				type: "tuple[]"
			},
			{
				internalType: "address[][]",
				name: "adapters",
				type: "address[][]"
			},
			{
				internalType: "address[][][]",
				name: "tokens",
				type: "address[][][]"
			}
		],
		name: "addProtocols",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string[]",
				name: "tokenAdapterNames",
				type: "string[]"
			},
			{
				internalType: "address[]",
				name: "adapters",
				type: "address[]"
			}
		],
		name: "addTokenAdapters",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "address",
				name: "adapter",
				type: "address"
			},
			{
				internalType: "address[]",
				name: "tokens",
				type: "address[]"
			}
		],
		name: "getAdapterBalance",
		outputs: [
			{
				components: [
					{
						components: [
							{
								internalType: "address",
								name: "adapterAddress",
								type: "address"
							},
							{
								internalType: "string",
								name: "adapterType",
								type: "string"
							}
						],
						internalType: "struct AdapterMetadata",
						name: "metadata",
						type: "tuple"
					},
					{
						components: [
							{
								components: [
									{
										components: [
											{
												internalType: "address",
												name: "token",
												type: "address"
											},
											{
												internalType: "string",
												name: "name",
												type: "string"
											},
											{
												internalType: "string",
												name: "symbol",
												type: "string"
											},
											{
												internalType: "uint8",
												name: "decimals",
												type: "uint8"
											}
										],
										internalType: "struct TokenMetadata",
										name: "metadata",
										type: "tuple"
									},
									{
										internalType: "uint256",
										name: "amount",
										type: "uint256"
									}
								],
								internalType: "struct TokenBalance",
								name: "base",
								type: "tuple"
							},
							{
								components: [
									{
										components: [
											{
												internalType: "address",
												name: "token",
												type: "address"
											},
											{
												internalType: "string",
												name: "name",
												type: "string"
											},
											{
												internalType: "string",
												name: "symbol",
												type: "string"
											},
											{
												internalType: "uint8",
												name: "decimals",
												type: "uint8"
											}
										],
										internalType: "struct TokenMetadata",
										name: "metadata",
										type: "tuple"
									},
									{
										internalType: "uint256",
										name: "amount",
										type: "uint256"
									}
								],
								internalType: "struct TokenBalance[]",
								name: "underlying",
								type: "tuple[]"
							}
						],
						internalType: "struct FullTokenBalance[]",
						name: "balances",
						type: "tuple[]"
					}
				],
				internalType: "struct AdapterBalance",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "address[]",
				name: "adapters",
				type: "address[]"
			}
		],
		name: "getAdapterBalances",
		outputs: [
			{
				components: [
					{
						components: [
							{
								internalType: "address",
								name: "adapterAddress",
								type: "address"
							},
							{
								internalType: "string",
								name: "adapterType",
								type: "string"
							}
						],
						internalType: "struct AdapterMetadata",
						name: "metadata",
						type: "tuple"
					},
					{
						components: [
							{
								components: [
									{
										components: [
											{
												internalType: "address",
												name: "token",
												type: "address"
											},
											{
												internalType: "string",
												name: "name",
												type: "string"
											},
											{
												internalType: "string",
												name: "symbol",
												type: "string"
											},
											{
												internalType: "uint8",
												name: "decimals",
												type: "uint8"
											}
										],
										internalType: "struct TokenMetadata",
										name: "metadata",
										type: "tuple"
									},
									{
										internalType: "uint256",
										name: "amount",
										type: "uint256"
									}
								],
								internalType: "struct TokenBalance",
								name: "base",
								type: "tuple"
							},
							{
								components: [
									{
										components: [
											{
												internalType: "address",
												name: "token",
												type: "address"
											},
											{
												internalType: "string",
												name: "name",
												type: "string"
											},
											{
												internalType: "string",
												name: "symbol",
												type: "string"
											},
											{
												internalType: "uint8",
												name: "decimals",
												type: "uint8"
											}
										],
										internalType: "struct TokenMetadata",
										name: "metadata",
										type: "tuple"
									},
									{
										internalType: "uint256",
										name: "amount",
										type: "uint256"
									}
								],
								internalType: "struct TokenBalance[]",
								name: "underlying",
								type: "tuple[]"
							}
						],
						internalType: "struct FullTokenBalance[]",
						name: "balances",
						type: "tuple[]"
					}
				],
				internalType: "struct AdapterBalance[]",
				name: "",
				type: "tuple[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "getBalances",
		outputs: [
			{
				components: [
					{
						components: [
							{
								internalType: "string",
								name: "name",
								type: "string"
							},
							{
								internalType: "string",
								name: "description",
								type: "string"
							},
							{
								internalType: "string",
								name: "websiteURL",
								type: "string"
							},
							{
								internalType: "string",
								name: "iconURL",
								type: "string"
							},
							{
								internalType: "uint256",
								name: "version",
								type: "uint256"
							}
						],
						internalType: "struct ProtocolMetadata",
						name: "metadata",
						type: "tuple"
					},
					{
						components: [
							{
								components: [
									{
										internalType: "address",
										name: "adapterAddress",
										type: "address"
									},
									{
										internalType: "string",
										name: "adapterType",
										type: "string"
									}
								],
								internalType: "struct AdapterMetadata",
								name: "metadata",
								type: "tuple"
							},
							{
								components: [
									{
										components: [
											{
												components: [
													{
														internalType: "address",
														name: "token",
														type: "address"
													},
													{
														internalType: "string",
														name: "name",
														type: "string"
													},
													{
														internalType: "string",
														name: "symbol",
														type: "string"
													},
													{
														internalType: "uint8",
														name: "decimals",
														type: "uint8"
													}
												],
												internalType: "struct TokenMetadata",
												name: "metadata",
												type: "tuple"
											},
											{
												internalType: "uint256",
												name: "amount",
												type: "uint256"
											}
										],
										internalType: "struct TokenBalance",
										name: "base",
										type: "tuple"
									},
									{
										components: [
											{
												components: [
													{
														internalType: "address",
														name: "token",
														type: "address"
													},
													{
														internalType: "string",
														name: "name",
														type: "string"
													},
													{
														internalType: "string",
														name: "symbol",
														type: "string"
													},
													{
														internalType: "uint8",
														name: "decimals",
														type: "uint8"
													}
												],
												internalType: "struct TokenMetadata",
												name: "metadata",
												type: "tuple"
											},
											{
												internalType: "uint256",
												name: "amount",
												type: "uint256"
											}
										],
										internalType: "struct TokenBalance[]",
										name: "underlying",
										type: "tuple[]"
									}
								],
								internalType: "struct FullTokenBalance[]",
								name: "balances",
								type: "tuple[]"
							}
						],
						internalType: "struct AdapterBalance[]",
						name: "adapterBalances",
						type: "tuple[]"
					}
				],
				internalType: "struct ProtocolBalance[]",
				name: "",
				type: "tuple[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "tokenType",
				type: "string"
			},
			{
				internalType: "address",
				name: "token",
				type: "address"
			}
		],
		name: "getFinalFullTokenBalance",
		outputs: [
			{
				components: [
					{
						components: [
							{
								components: [
									{
										internalType: "address",
										name: "token",
										type: "address"
									},
									{
										internalType: "string",
										name: "name",
										type: "string"
									},
									{
										internalType: "string",
										name: "symbol",
										type: "string"
									},
									{
										internalType: "uint8",
										name: "decimals",
										type: "uint8"
									}
								],
								internalType: "struct TokenMetadata",
								name: "metadata",
								type: "tuple"
							},
							{
								internalType: "uint256",
								name: "amount",
								type: "uint256"
							}
						],
						internalType: "struct TokenBalance",
						name: "base",
						type: "tuple"
					},
					{
						components: [
							{
								components: [
									{
										internalType: "address",
										name: "token",
										type: "address"
									},
									{
										internalType: "string",
										name: "name",
										type: "string"
									},
									{
										internalType: "string",
										name: "symbol",
										type: "string"
									},
									{
										internalType: "uint8",
										name: "decimals",
										type: "uint8"
									}
								],
								internalType: "struct TokenMetadata",
								name: "metadata",
								type: "tuple"
							},
							{
								internalType: "uint256",
								name: "amount",
								type: "uint256"
							}
						],
						internalType: "struct TokenBalance[]",
						name: "underlying",
						type: "tuple[]"
					}
				],
				internalType: "struct FullTokenBalance",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "tokenType",
				type: "string"
			},
			{
				internalType: "address",
				name: "token",
				type: "address"
			}
		],
		name: "getFullTokenBalance",
		outputs: [
			{
				components: [
					{
						components: [
							{
								components: [
									{
										internalType: "address",
										name: "token",
										type: "address"
									},
									{
										internalType: "string",
										name: "name",
										type: "string"
									},
									{
										internalType: "string",
										name: "symbol",
										type: "string"
									},
									{
										internalType: "uint8",
										name: "decimals",
										type: "uint8"
									}
								],
								internalType: "struct TokenMetadata",
								name: "metadata",
								type: "tuple"
							},
							{
								internalType: "uint256",
								name: "amount",
								type: "uint256"
							}
						],
						internalType: "struct TokenBalance",
						name: "base",
						type: "tuple"
					},
					{
						components: [
							{
								components: [
									{
										internalType: "address",
										name: "token",
										type: "address"
									},
									{
										internalType: "string",
										name: "name",
										type: "string"
									},
									{
										internalType: "string",
										name: "symbol",
										type: "string"
									},
									{
										internalType: "uint8",
										name: "decimals",
										type: "uint8"
									}
								],
								internalType: "struct TokenMetadata",
								name: "metadata",
								type: "tuple"
							},
							{
								internalType: "uint256",
								name: "amount",
								type: "uint256"
							}
						],
						internalType: "struct TokenBalance[]",
						name: "underlying",
						type: "tuple[]"
					}
				],
				internalType: "struct FullTokenBalance",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "protocolName",
				type: "string"
			}
		],
		name: "getProtocolAdapters",
		outputs: [
			{
				internalType: "address[]",
				name: "",
				type: "address[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "string[]",
				name: "protocolNames",
				type: "string[]"
			}
		],
		name: "getProtocolBalances",
		outputs: [
			{
				components: [
					{
						components: [
							{
								internalType: "string",
								name: "name",
								type: "string"
							},
							{
								internalType: "string",
								name: "description",
								type: "string"
							},
							{
								internalType: "string",
								name: "websiteURL",
								type: "string"
							},
							{
								internalType: "string",
								name: "iconURL",
								type: "string"
							},
							{
								internalType: "uint256",
								name: "version",
								type: "uint256"
							}
						],
						internalType: "struct ProtocolMetadata",
						name: "metadata",
						type: "tuple"
					},
					{
						components: [
							{
								components: [
									{
										internalType: "address",
										name: "adapterAddress",
										type: "address"
									},
									{
										internalType: "string",
										name: "adapterType",
										type: "string"
									}
								],
								internalType: "struct AdapterMetadata",
								name: "metadata",
								type: "tuple"
							},
							{
								components: [
									{
										components: [
											{
												components: [
													{
														internalType: "address",
														name: "token",
														type: "address"
													},
													{
														internalType: "string",
														name: "name",
														type: "string"
													},
													{
														internalType: "string",
														name: "symbol",
														type: "string"
													},
													{
														internalType: "uint8",
														name: "decimals",
														type: "uint8"
													}
												],
												internalType: "struct TokenMetadata",
												name: "metadata",
												type: "tuple"
											},
											{
												internalType: "uint256",
												name: "amount",
												type: "uint256"
											}
										],
										internalType: "struct TokenBalance",
										name: "base",
										type: "tuple"
									},
									{
										components: [
											{
												components: [
													{
														internalType: "address",
														name: "token",
														type: "address"
													},
													{
														internalType: "string",
														name: "name",
														type: "string"
													},
													{
														internalType: "string",
														name: "symbol",
														type: "string"
													},
													{
														internalType: "uint8",
														name: "decimals",
														type: "uint8"
													}
												],
												internalType: "struct TokenMetadata",
												name: "metadata",
												type: "tuple"
											},
											{
												internalType: "uint256",
												name: "amount",
												type: "uint256"
											}
										],
										internalType: "struct TokenBalance[]",
										name: "underlying",
										type: "tuple[]"
									}
								],
								internalType: "struct FullTokenBalance[]",
								name: "balances",
								type: "tuple[]"
							}
						],
						internalType: "struct AdapterBalance[]",
						name: "adapterBalances",
						type: "tuple[]"
					}
				],
				internalType: "struct ProtocolBalance[]",
				name: "",
				type: "tuple[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "protocolName",
				type: "string"
			}
		],
		name: "getProtocolMetadata",
		outputs: [
			{
				components: [
					{
						internalType: "string",
						name: "name",
						type: "string"
					},
					{
						internalType: "string",
						name: "description",
						type: "string"
					},
					{
						internalType: "string",
						name: "websiteURL",
						type: "string"
					},
					{
						internalType: "string",
						name: "iconURL",
						type: "string"
					},
					{
						internalType: "uint256",
						name: "version",
						type: "uint256"
					}
				],
				internalType: "struct ProtocolMetadata",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getProtocolNames",
		outputs: [
			{
				internalType: "string[]",
				name: "",
				type: "string[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "adapter",
				type: "address"
			}
		],
		name: "getSupportedTokens",
		outputs: [
			{
				internalType: "address[]",
				name: "",
				type: "address[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "tokenAdapterName",
				type: "string"
			}
		],
		name: "getTokenAdapter",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getTokenAdapterNames",
		outputs: [
			{
				internalType: "string[]",
				name: "",
				type: "string[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "protocolName",
				type: "string"
			}
		],
		name: "isValidProtocol",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "tokenAdapterName",
				type: "string"
			}
		],
		name: "isValidTokenAdapter",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "protocolName",
				type: "string"
			},
			{
				internalType: "uint256[]",
				name: "adapterIndices",
				type: "uint256[]"
			}
		],
		name: "removeProtocolAdapters",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string[]",
				name: "protocolNames",
				type: "string[]"
			}
		],
		name: "removeProtocols",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string[]",
				name: "tokenAdapterNames",
				type: "string[]"
			}
		],
		name: "removeTokenAdapters",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_owner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "protocolName",
				type: "string"
			},
			{
				internalType: "uint256",
				name: "index",
				type: "uint256"
			},
			{
				internalType: "address",
				name: "newAdapterAddress",
				type: "address"
			},
			{
				internalType: "address[]",
				name: "newSupportedTokens",
				type: "address[]"
			}
		],
		name: "updateProtocolAdapter",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "protocolName",
				type: "string"
			},
			{
				internalType: "string",
				name: "name",
				type: "string"
			},
			{
				internalType: "string",
				name: "description",
				type: "string"
			},
			{
				internalType: "string",
				name: "websiteURL",
				type: "string"
			},
			{
				internalType: "string",
				name: "iconURL",
				type: "string"
			}
		],
		name: "updateProtocolMetadata",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "tokenAdapterName",
				type: "string"
			},
			{
				internalType: "address",
				name: "adapter",
				type: "address"
			}
		],
		name: "updateTokenAdapter",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var addresses = {
  adapterRegistry: '0x06FE76B2f432fdfEcAEf1a7d4f6C3d41B5861672'
};

var ProtocolBalance = function ProtocolBalance(balances, metadata) {
  this.metadata = metadata;
  this.balances = balances;
};
var ProtocolMetadata = function ProtocolMetadata(name, description, website, logo, version) {
  this.name = name;
  this.description = description;
  this.website = new URL('https://' + website);
  this.logo = new URL('https://' + logo); //TODO: Check int

  this.version = BigInt(version.toNumber());
};
var AdapterBalance = function AdapterBalance(balances, metadata) {
  this.metadata = metadata;
  this.balances = balances;
};
var AdapterMetadata = function AdapterMetadata(address, type) {
  this.address = address;
  this.type = type;
};
var AssetBalance = function AssetBalance(base, underlying) {
  this.base = base;
  this.underlying = underlying;
};
var TokenBalance = /*#__PURE__*/function () {
  function TokenBalance(balance, metadata) {
    this.balance = balance;
    this.metadata = metadata;
  }

  var _proto = TokenBalance.prototype;

  _proto.getAmount = function getAmount() {
    return new utils.BigNumber(this.balance.toString()).div(new utils.BigNumber(10).pow(this.metadata.decimals.toString()));
  };

  return TokenBalance;
}();
var TokenMetadata = function TokenMetadata(address, decimals, name, symbol) {
  this.address = address;
  this.decimals = decimals;
  this.name = name;
  this.symbol = symbol;
};

var Builder = /*#__PURE__*/function () {
  function Builder() {}

  var _proto = Builder.prototype;

  _proto.protocolBalance = function protocolBalance(_protocolBalance) {
    var _this = this;

    return new ProtocolBalance(_protocolBalance.adapterBalances.map(function (adapterBalance) {
      return _this.adapterBalance(adapterBalance);
    }), this.protocolMetadata(_protocolBalance.metadata));
  };

  _proto.adapterBalance = function adapterBalance(protocolAdapter) {
    var _this2 = this;

    return new AdapterBalance(protocolAdapter.balances.map(function (adapterBalance) {
      return _this2.assetBalance(adapterBalance);
    }), this.adapterMetadata(protocolAdapter.metadata));
  };

  _proto.protocolMetadata = function protocolMetadata(protocol) {
    return new ProtocolMetadata(protocol.name, protocol.description, protocol.websiteURL, protocol.iconURL, protocol.version);
  };

  _proto.adapterMetadata = function adapterMetadata(_adapterMetadata) {
    return new AdapterMetadata(_adapterMetadata.adapterAddress, _adapterMetadata.adapterType);
  };

  _proto.assetBalance = function assetBalance(_assetBalance) {
    var _this3 = this;

    return new AssetBalance(this.tokenBalance(_assetBalance.base), _assetBalance.underlying.map(function (underlying) {
      return _this3.tokenBalance(underlying);
    }));
  };

  _proto.tokenBalance = function tokenBalance(_tokenBalance) {
    return new TokenBalance(_tokenBalance.amount.toString(), this.tokenMetadata(_tokenBalance.metadata));
  };

  _proto.tokenMetadata = function tokenMetadata(metadata) {
    return new TokenMetadata(metadata.token, metadata.decimals, metadata.name, metadata.symbol);
  };

  return Builder;
}();

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

var ProtocolDoesNotExistError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(ProtocolDoesNotExistError, _Error);

  function ProtocolDoesNotExistError(protocol) {
    var _this;

    _this = _Error.call(this, 'Protocol [' + protocol + '] does not exists') || this;
    _this.name = 'ProtocolDoesNotExistError';
    _this.protocol = protocol;
    return _this;
  }

  return ProtocolDoesNotExistError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var DeFiSDK = /*#__PURE__*/function () {
  function DeFiSDK(nodeUrl) {
    this.adapterRegistry = new ethers.ethers.Contract(addresses.adapterRegistry, adapterRegistryABI, new ethers.ethers.providers.JsonRpcProvider(new URL(nodeUrl).toString()));
    this.builder = new Builder();
  }

  var _proto = DeFiSDK.prototype;

  _proto.getProtocolNames = function getProtocolNames() {
    return this.adapterRegistry.getProtocolNames();
  };

  _proto.getProtocolMetaData = function getProtocolMetaData(protocol) {
    var _this = this;

    return this.adapterRegistry.getProtocolMetadata(protocol).then(function (protocol) {
      return _this.builder.protocolMetadata(protocol);
    });
  };

  _proto.getTokenAdapterNames = function getTokenAdapterNames() {
    return this.adapterRegistry.getTokenAdapterNames();
  };

  _proto.getProtocolBalance = function getProtocolBalance(account, protocol) {
    return this.getProtocolBalances(account, [protocol]).then(function (protocolBalances) {
      if (protocolBalances.length === 0) {
        throw new ProtocolDoesNotExistError(protocol);
      } else if (protocolBalances.length > 1) {
        throw new RangeError('More than 1 protocol found.');
      }

      return protocolBalances[0];
    });
  };

  _proto.getProtocolBalances = function getProtocolBalances(account, protocols) {
    var _this2 = this;

    return this.adapterRegistry.getProtocolBalances(account, protocols).then(function (protocolBalances) {
      return protocolBalances.map(function (protocolBalance) {
        return _this2.builder.protocolBalance(protocolBalance);
      });
    });
  };

  _proto.getAccountBalances = function getAccountBalances(account) {
    var _this3 = this;

    return this.adapterRegistry.getBalances(account).then(function (accountBalances) {
      return accountBalances.map(function (protocolBalance) {
        return _this3.builder.protocolBalance(protocolBalance);
      });
    });
  };

  _proto.getTokenComponents = function getTokenComponents(type, token) {
    var _this4 = this;

    return this.adapterRegistry.getFinalFullTokenBalance(type, token).then(function (asset) {
      return _this4.builder.assetBalance(asset);
    });
  };

  return DeFiSDK;
}();

var Protocols = {
  ZRX_STAKING: '0x Staking',
  AAVE: 'Aave',
  BALANCER: 'Balancer',
  BANCOR: 'Bancor',
  CHAI: 'Chai',
  COMPOUND: 'Compound',
  CURVE: 'Curve',
  DSR: 'Dai Savings Rate',
  DMM: 'DeFi Money Market',
  DYDX: 'dYdX',
  IDLE: 'Idle',
  IEARN_V2: 'iearn.finance (v2)',
  IEARN_V3: 'iearn.finance (v3)',
  MCD: 'Multi-Collateral Dai',
  PIEDAO: 'PieDAO',
  POOLTOGETHER: 'PoolTogether',
  SYNTHETIX: 'Synthetix',
  TOKENSETS: 'TokenSets',
  UNISWAP_V1: 'Uniswap V1',
  UNISWAP_V2: 'Uniswap V2'
};

var TokenAdapters = {
  AAVE: 'AToken',
  BALANCER: 'Balancer pool token',
  CHAI: 'Chai token',
  COMPOUND: 'CToken',
  CURVE: 'Curve pool token',
  ERC20: 'ERC20',
  IDLE: 'IdleToken',
  DMM: 'MToken',
  PIEDAO: 'PieDAO Pie Token',
  POOLTOGETHER: 'PoolTogether pool',
  TOKENSETS: 'SetToken',
  BANCOR: 'SmartToken',
  UNISWAP_V1: 'Uniswap V1 pool token',
  UNISWAP_V2: 'Uniswap V2 pool token',
  IEARN: 'YToken'
};

exports.DeFiSDK = DeFiSDK;
exports.Protocols = Protocols;
exports.TokenAdapters = TokenAdapters;
//# sourceMappingURL=defi-sdk.cjs.development.js.map
