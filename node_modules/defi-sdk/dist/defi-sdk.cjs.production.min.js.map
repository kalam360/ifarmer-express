{"version":3,"file":"defi-sdk.cjs.production.min.js","sources":["../src/entities/entities.ts","../src/entities/builder.ts","../src/errors/protocolDoesNotExist.ts","../src/defisdk.ts","../src/configs/addresses.ts","../src/configs/protocols.ts","../src/configs/tokenAdapters.ts"],"sourcesContent":["import {\n  AdapterBalanceInterface,\n  AdapterMetadataInterface,\n  AssetBalanceInterface,\n  ProtocolBalanceInterface,\n  ProtocolMetadataInterface,\n  TokenBalanceInterface,\n  TokenMetadataInterface,\n} from '../protocols/interfaces';\nimport { Address } from '../protocols/types';\nimport { BigNumber } from 'ethers/utils';\n\nexport class ProtocolBalance implements ProtocolBalanceInterface {\n  balances: [AdapterBalanceInterface];\n  metadata: ProtocolMetadataInterface;\n\n  constructor(balances: [AdapterBalance], metadata: ProtocolMetadata) {\n    this.metadata = metadata;\n    this.balances = balances;\n  }\n}\n\nexport class ProtocolMetadata implements ProtocolMetadataInterface {\n  description: string;\n  logo: URL;\n  name: string;\n  version: BigInt;\n  website: URL;\n\n  constructor(\n    name: string,\n    description: string,\n    website: string,\n    logo: string,\n    version: BigNumber\n  ) {\n    this.name = name;\n    this.description = description;\n    this.website = new URL('https://' + website);\n    this.logo = new URL('https://' + logo);\n    //TODO: Check int\n    this.version = BigInt(version.toNumber());\n  }\n}\n\nexport class AdapterBalance implements AdapterBalanceInterface {\n  balances: [AssetBalanceInterface];\n  metadata: AdapterMetadataInterface;\n\n  constructor(balances: [AssetBalance], metadata: AdapterMetadata) {\n    this.metadata = metadata;\n    this.balances = balances;\n  }\n}\n\nexport class AdapterMetadata implements AdapterMetadataInterface {\n  address: Address;\n  type: string;\n\n  constructor(address: Address, type: string) {\n    this.address = address;\n    this.type = type;\n  }\n}\n\nexport class AssetBalance implements AssetBalanceInterface {\n  base: TokenBalanceInterface;\n  underlying: [TokenBalanceInterface];\n\n  constructor(base: TokenBalance, underlying: [TokenBalance]) {\n    this.base = base;\n    this.underlying = underlying;\n  }\n}\n\nexport class TokenBalance implements TokenBalanceInterface {\n  balance: BigInt;\n  metadata: TokenMetadataInterface;\n\n  constructor(balance: BigInt, metadata: TokenMetadata) {\n    this.balance = balance;\n    this.metadata = metadata;\n  }\n\n  getAmount(): BigNumber {\n    return new BigNumber(this.balance.toString()).div(\n      new BigNumber(10).pow(this.metadata.decimals.toString())\n    );\n  }\n}\n\nexport class TokenMetadata implements TokenMetadataInterface {\n  address: Address;\n  decimals: number;\n  name: string;\n  symbol: string;\n\n  constructor(\n    address: Address,\n    decimals: number,\n    name: string,\n    symbol: string\n  ) {\n    this.address = address;\n    this.decimals = decimals;\n    this.name = name;\n    this.symbol = symbol;\n  }\n}\n","import {\n  AdapterBalance,\n  AdapterMetadata,\n  AssetBalance,\n  ProtocolBalance,\n  ProtocolMetadata,\n  TokenBalance,\n  TokenMetadata,\n} from './entities';\n\nexport class Builder {\n  protocolBalance(protocolBalance): ProtocolBalance {\n    return new ProtocolBalance(\n      protocolBalance.adapterBalances.map(adapterBalance => {\n        return this.adapterBalance(adapterBalance);\n      }),\n      this.protocolMetadata(protocolBalance.metadata)\n    );\n  }\n\n  adapterBalance(protocolAdapter): AdapterBalance {\n    return new AdapterBalance(\n      protocolAdapter.balances.map(adapterBalance => {\n        return this.assetBalance(adapterBalance);\n      }),\n      this.adapterMetadata(protocolAdapter.metadata)\n    );\n  }\n\n  protocolMetadata(protocol): ProtocolMetadata {\n    return new ProtocolMetadata(\n      protocol.name,\n      protocol.description,\n      protocol.websiteURL,\n      protocol.iconURL,\n      protocol.version\n    );\n  }\n\n  adapterMetadata(adapterMetadata): AdapterMetadata {\n    return new AdapterMetadata(\n      adapterMetadata.adapterAddress,\n      adapterMetadata.adapterType\n    );\n  }\n\n  assetBalance(assetBalance): AssetBalance {\n    return new AssetBalance(\n      this.tokenBalance(assetBalance.base),\n      assetBalance.underlying.map(underlying => {\n        return this.tokenBalance(underlying);\n      })\n    );\n  }\n\n  tokenBalance(tokenBalance): TokenBalance {\n    return new TokenBalance(\n      tokenBalance.amount.toString(),\n      this.tokenMetadata(tokenBalance.metadata)\n    );\n  }\n\n  tokenMetadata(metadata): TokenMetadata {\n    return new TokenMetadata(\n      metadata.token,\n      metadata.decimals,\n      metadata.name,\n      metadata.symbol\n    );\n  }\n}\n","export class ProtocolDoesNotExistError extends Error {\n  protocol: string;\n  constructor(protocol) {\n    super('Protocol [' + protocol + '] does not exists');\n    this.name = 'ProtocolDoesNotExistError';\n    this.protocol = protocol;\n  }\n}\n","import { Contract, ethers } from 'ethers';\nimport adapterRegistryABI from './configs/adapterRegistryABI.json';\nimport { addresses } from './configs/addresses';\nimport { DeFiSDKInterface } from './protocols/interfaces';\nimport { Address } from './protocols/types';\nimport { Builder } from './entities/builder';\nimport { ProtocolDoesNotExistError } from './errors/protocolDoesNotExist';\n\nexport class DeFiSDK implements DeFiSDKInterface {\n  protected adapterRegistry: Contract;\n  private builder: Builder;\n\n  constructor(nodeUrl: string) {\n    this.adapterRegistry = new ethers.Contract(\n      addresses.adapterRegistry,\n      adapterRegistryABI,\n      new ethers.providers.JsonRpcProvider(new URL(nodeUrl).toString())\n    );\n    this.builder = new Builder();\n  }\n\n  getProtocolNames() {\n    return this.adapterRegistry.getProtocolNames() as Promise<string[]>;\n  }\n\n  getProtocolMetaData(protocol: string) {\n    return this.adapterRegistry.getProtocolMetadata(protocol).then(protocol => {\n      return this.builder.protocolMetadata(protocol);\n    });\n  }\n\n  getTokenAdapterNames() {\n    return this.adapterRegistry.getTokenAdapterNames() as Promise<string[]>;\n  }\n\n  getProtocolBalance(account: Address, protocol: string) {\n    return this.getProtocolBalances(account, [protocol]).then(\n      protocolBalances => {\n        if (protocolBalances.length === 0) {\n          throw new ProtocolDoesNotExistError(protocol);\n        } else if (protocolBalances.length > 1) {\n          throw new RangeError('More than 1 protocol found.');\n        }\n        return protocolBalances[0];\n      }\n    );\n  }\n\n  getProtocolBalances(account: Address, protocols: string[]) {\n    return this.adapterRegistry\n      .getProtocolBalances(account, protocols)\n      .then(protocolBalances => {\n        return protocolBalances.map(protocolBalance => {\n          return this.builder.protocolBalance(protocolBalance);\n        });\n      });\n  }\n\n  getAccountBalances(account: Address) {\n    return this.adapterRegistry.getBalances(account).then(accountBalances => {\n      return accountBalances.map(protocolBalance => {\n        return this.builder.protocolBalance(protocolBalance);\n      });\n    });\n  }\n\n  getTokenComponents(type: string, token: Address) {\n    return this.adapterRegistry\n      .getFinalFullTokenBalance(type, token)\n      .then(asset => {\n        return this.builder.assetBalance(asset);\n      });\n  }\n}\n","import { ContractAddresses } from '../protocols/interfaces';\n\nexport const addresses = {\n  adapterRegistry: '0x06FE76B2f432fdfEcAEf1a7d4f6C3d41B5861672',\n} as ContractAddresses;\n","export const Protocols = {\n  ZRX_STAKING: '0x Staking',\n  AAVE: 'Aave',\n  BALANCER: 'Balancer',\n  BANCOR: 'Bancor',\n  CHAI: 'Chai',\n  COMPOUND: 'Compound',\n  CURVE: 'Curve',\n  DSR: 'Dai Savings Rate',\n  DMM: 'DeFi Money Market',\n  DYDX: 'dYdX',\n  IDLE: 'Idle',\n  IEARN_V2: 'iearn.finance (v2)',\n  IEARN_V3: 'iearn.finance (v3)',\n  MCD: 'Multi-Collateral Dai',\n  PIEDAO: 'PieDAO',\n  POOLTOGETHER: 'PoolTogether',\n  SYNTHETIX: 'Synthetix',\n  TOKENSETS: 'TokenSets',\n  UNISWAP_V1: 'Uniswap V1',\n  UNISWAP_V2: 'Uniswap V2',\n};\n","export const TokenAdapters = {\n  AAVE: 'AToken',\n  BALANCER: 'Balancer pool token',\n  CHAI: 'Chai token',\n  COMPOUND: 'CToken',\n  CURVE: 'Curve pool token',\n  ERC20: 'ERC20',\n  IDLE: 'IdleToken',\n  DMM: 'MToken',\n  PIEDAO: 'PieDAO Pie Token',\n  POOLTOGETHER: 'PoolTogether pool',\n  TOKENSETS: 'SetToken',\n  BANCOR: 'SmartToken',\n  UNISWAP_V1: 'Uniswap V1 pool token',\n  UNISWAP_V2: 'Uniswap V2 pool token',\n  IEARN: 'YToken',\n};\n"],"names":["ProtocolBalance","balances","metadata","ProtocolMetadata","name","description","website","logo","version","URL","BigInt","toNumber","AdapterBalance","AdapterMetadata","address","type","AssetBalance","base","underlying","TokenBalance","balance","getAmount","BigNumber","this","toString","div","pow","decimals","TokenMetadata","symbol","Builder","protocolBalance","adapterBalances","map","adapterBalance","_this","protocolMetadata","protocolAdapter","_this2","assetBalance","adapterMetadata","protocol","websiteURL","iconURL","adapterAddress","adapterType","tokenBalance","_this3","amount","tokenMetadata","token","ProtocolDoesNotExistError","Error","nodeUrl","adapterRegistry","ethers","Contract","adapterRegistryABI","providers","JsonRpcProvider","builder","getProtocolNames","getProtocolMetaData","getProtocolMetadata","then","getTokenAdapterNames","getProtocolBalance","account","getProtocolBalances","protocolBalances","length","RangeError","protocols","getAccountBalances","getBalances","accountBalances","getTokenComponents","getFinalFullTokenBalance","asset","_this4","ZRX_STAKING","AAVE","BALANCER","BANCOR","CHAI","COMPOUND","CURVE","DSR","DMM","DYDX","IDLE","IEARN_V2","IEARN_V3","MCD","PIEDAO","POOLTOGETHER","SYNTHETIX","TOKENSETS","UNISWAP_V1","UNISWAP_V2","ERC20","IEARN"],"mappings":"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"}